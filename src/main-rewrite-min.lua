local a={}local b={supports={video=false,keyboard=false,internet=false,network=false,tmpfs=false},bootable=false}local c=component.list("screen")()local d=component.list("gpu")()if not c and not d then b.supports.video=false;return end;if c and d then component.invoke(d,"bind",c)b.supports.video=true end;function sleep(e)computer.pullSignal(os.clock()+(e or 1))end;local f={data={x=1,y=1}}do local g=component.proxy(d)f.clearScreen=function()local h,i=g.getResolution()g.fill(1,1,h,i,"")end;f.print=function(...)local h,i=g.getResolution()local j=table.concat({...},"")or""for k=1,string.len(j),1 do local l=string.sub(j,k,k)g.set(f["data"]["x"],f["data"]["y"],string.sub(j,k,k))f["data"]["x"]=f["data"]["x"]+1 end end;f.println=function(...)f.print(...)f["data"]["y"]=f["data"]["y"]+1;f["data"]["x"]=1 end end;function readFile(m,n,o)local p=""local q=nil;local handle=component.invoke(m,"open",n)repeat q=component.invoke(m,"read",handle,math.huge)p=p..(q or"")until not q;if o then return true,load(p,"=init")else return true,p end end;function attemptBootFromDevice(m)local r=component.invoke(m,"exists","/init.lua")if not r then return nil end;local s,t=readFile(m,"/init.lua",true)component.invoke(m,"close",handle)computer.getBootAddress=function()return m end;return t end;function findAllBootableDevices()local u={}for m,s in component.list("filesystem")do local v=component.invoke(m,"exists","/init.lua")if v then table.insert(u,m)end end;return u end;function standardBoot()local w=findAllBootableDevices()if#w==0 then assert(nil,"NO BOOTABLE DEVICES FOUND!")end;local x=attemptBootFromDevice(w[1])x()end;local y=function()end;do local z=f.clearScreen;local A=f.print;local B=f.println;local function C(D)for E,F in pairs(D)do f.println(E..". "..F)end;while true do local G,s,s,H=computer.pullSignal()if G=="key_down"then if D[H-1]~=nil then return H-1 else end end end end;local function I(J,K,L)local M=K.open(L,"wb")local N=request(J)local q;repeat q=N:read(1)L.write(M,q)until not q;K.close(M)return end;local function O()z()f.println("Getting bootable devices...")local P=findAllBootableDevices()z()local Q=C(P)local R=P[Q]local S=attemptBootFromDevice(R)if S~=nil then f.println("Booting target system...")S()else f.println("Unable to boot to selected device!")f.println("Shutting down!")computer.shutdown()return end end;local function T()z()f.println("Boot settings menu is not currently implemented!")f.println("System will shutdown in five seconds!")sleep(5)computer.shutdown()end;local function U()f.println("Exiting EFI system...")standardBoot()end;local function V()f.println("Downloading network recovery")local W=computer.tmpAddress()local X=component.proxy(W)I("https://raw.githubusercontent.com/OpenPenguin/EggCracker/master/src/network-recovery.lua",X,"/recovery.lua")local s,t=readFile(W,"/recovery.lua",true)t()end;local function Y()z()local Z={O,T,V,U}local _=C({"Select boot device","Edit boot settings","Network recovery mode","Continue normal boot"})Z[tonumber(_)]()end;y=function()f.println("Launching EFI menu...")Y()end end;do local function a0(a1,a2)local a3=os.clock()local a4=a3+a1;local a5=false;repeat local a6=a2(a3)if a6 then a5=true end;a3=os.clock()until a3>=a4 or a5 end;f.clearScreen()f.println("EggCracker version 1.0.0 booting!")f.println("Press shift within the next 5 seconds to open menu!")local a7=false;local a8=os.clock()+5;repeat local G,s,s,H=computer.pullSignal()if G=="key_down"and(H==42 or H==54)then a7=true end until os.clock()>=a8 or a7;if a7 then computer.beep(1000,0.2)f.println("Interrupt detected! Attempting to start EFI menu...")sleep(1)y()else f.println("Running normal boot operations...")standardBoot()end end
